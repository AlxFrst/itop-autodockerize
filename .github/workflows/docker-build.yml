name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - versions.json
      - Dockerfile

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Read versions.json
        id: vars
        run: |
          import json
          with open('versions.json') as f:
              data = json.load(f)
          versions = []
          for item in data:
              versions.append({
                  'name': item['name'],
                  'itop_url': item['itop_url'],
                  'php_version': item['php_version']
              })
          print(f"::set-output name=versions::{json.dumps(versions)}")
        shell: python

      - name: Get Existing Tags
        id: existing_tags
        run: |
          existing_tags=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            https://ghcr.io/v2/${{ github.repository_owner }}/itop/tags/list | jq -r '.tags[]')
          echo "::set-output name=tags::$existing_tags"

      - name: Determine Tags to Delete
        id: tags_to_delete
        run: |
          existing_tags=(${{ steps.existing_tags.outputs.tags }})
          versions=${{ steps.vars.outputs.versions }}
          tags_to_keep=()
          for version in $(echo $versions | jq -c '.[]'); do
            name=$(echo $version | jq -r '.name')
            tags_to_keep+=("$name")
          done
          tags_to_delete=()
          for tag in "${existing_tags[@]}"; do
            if [[ ! " ${tags_to_keep[@]} " =~ " ${tag} " ]]; then
              tags_to_delete+=("$tag")
            fi
          done
          echo "::set-output name=tags_to_delete::${tags_to_delete[@]}"

      - name: Delete Unwanted Images
        if: steps.tags_to_delete.outputs.tags_to_delete != ''
        run: |
          for tag in ${{ steps.tags_to_delete.outputs.tags_to_delete }}; do
            digest=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              -H "Accept: application/vnd.oci.image.manifest.v1+json" \
              https://ghcr.io/v2/${{ github.repository_owner }}/itop/manifests/$tag \
              | jq -r '.config.digest')
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              https://ghcr.io/v2/${{ github.repository_owner }}/itop/manifests/$digest
          done

      - name: Build and Push Images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/itop:${{ matrix.version.name }}
          build-args: |
            ITOP_URL=${{ matrix.version.itop_url }}
            PHP_VERSION=${{ matrix.version.php_version }}
        strategy:
          matrix:
            version: ${{ fromJson(steps.vars.outputs.versions) }}
